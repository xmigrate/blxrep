{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"An eBPF based disk replication tool","text":""},{"location":"#blxrep","title":"blxrep","text":"<p>blxrep is a powerful tool designed for live data replication of disks over a network. It operates in two modes: dispatcher and agent, allowing for efficient and flexible disaster recovery setup. blxrep tracks the changes that happen on disk at sector level using eBPF tracepoints.</p>"},{"location":"#modes-of-operation","title":"Modes of Operation","text":"<p>blxrep can be run in three modes: dispatcher, agent, and TUI. Each mode has its own purpose and configuration. </p>"},{"location":"#dispatcher-mode","title":"Dispatcher Mode","text":"<p>In dispatcher mode, blxrep manages the overall replication process. It acts as a central collector for replicating disk data from multiple servers. It requires a data directory and policy directory to be specified. All types of disk backups are collected and stored in the specified data directory. Policy directory is used to specify the policy for the disk backups for each agent.</p>"},{"location":"#agent-mode","title":"Agent Mode","text":"<p>In agent mode, blxrep runs on individual servers to send snapshot backups and live changes to the dispatcher. It requires an agent ID, dispatcher address, and device to be specified. We need the agent ID to be unique if we are connecting multiple servers to the same dispatcher. Device is the disk that needs to be backed up and monitored for live changes.</p>"},{"location":"#tui-mode","title":"TUI mode","text":"<p>blxrep also provides a TUI mode to interact with dispatcher and agents. we use tcell for the TUI. It is a terminal UI library for Go that is easy to use and highly customizable. With TUI mode, you can navigate throught the agents that are connected to the dispatcher and see the status of the disk backups. You can also mount the disk backups to any available point in time and restore the files or partitions with the help of the TUI.</p> <p>To start the TUI, use the <code>tui</code> command:</p> <pre><code>blxrep tui --data-dir=&lt;data_directory&gt;\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#tech-stack","title":"Tech stack","text":"<p>We have chosen to use the following tech stack:</p> <ul> <li>Golang 1.23</li> <li>BoltDB</li> <li>eBPF</li> </ul> <p>We only have one code base for the Agent, Dispatcher and the TUI application. And it's a single binary for all at the moment. BoltDB is used to store the status of various actions like clone, pause, resume, restore, etc., to store the metadata of the servers where agent is running and to keep track of the dirty sectors.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>The blxrep architecture establishes a robust, real-time connection between Agents and the Dispatcher through multiple WebSocket channels. This design enables both full disk backups and continuous incremental change tracking to operate simultaneously. When an Agent connects, it authenticates through a secure WebSocket connection and immediately begins two parallel processes: creating a complete disk image and monitoring disk sectors for changes. During the full backup process, the Agent streams disk data to the Dispatcher, which stores it as an .img file in the snapshot directory while tracking progress in the xmactions database. Simultaneously, the Agent monitors disk sectors for changes, sending these sector numbers to the Dispatcher through a dedicated WebSocket channel. The Dispatcher preserves these sector changes as .cst files in the incremental directory.</p> <p>At regular intervals defined by the live_sync_frequency, the Dispatcher reads the collected sector numbers and requests the corresponding data from the Agent. Upon receiving this data, the Dispatcher stores it in .bak files within the incremental directory, ensuring all changes are captured and preserved.</p> <p>In the current implementation, if network connectivity between the Agent and Dispatcher is interrupted, the Agent initiates a new full disk snapshot upon reconnection. While this approach ensures data consistency, it's not optimized for network efficiency or storage resources. We are actively exploring more efficient approaches that would capture only the incremental changes that occurred during the network downtime, alongside the existing live change sector tracking mechanism.</p> <p>This optimization would significantly reduce network bandwidth usage and backup time during reconnection scenarios. Instead of transferring the entire disk image again, the system would only need to synchronize the specific sectors that changed during the disconnection period. This enhancement would be particularly valuable in environments with unstable network connections or when dealing with large disk volumes.</p> <pre><code>sequenceDiagram\n    participant A as Agent\n    participant D as Dispatcher\n    participant XMA as xmactions DB\n    participant XMD as xmdispatcher DB\n    participant SNAP as /data-dir/snapshot\n    participant INC as /data-dir/incremental\n\n    A-&gt;&gt;+D: WS: /ws/config, /ws/snapshot, /ws/live, /ws/restore\n    A-&gt;&gt;D: Auth (secret)\n    D--&gt;&gt;-A: Auth Success\n    A-&gt;&gt;D: Footprint Data\n    D-&gt;&gt;XMD: Store Footprint\n\n    par Full Backup\n        A-&gt;&gt;A: Start disk clone\n        A-&gt;&gt;+D: Metadata (/ws/snapshot)\n        D-&gt;&gt;XMA: Create action\n        D--&gt;&gt;-A: ACK\n        loop Backup Progress\n            A-&gt;&gt;D: Disk chunks\n            D-&gt;&gt;XMA: Update progress\n            D-&gt;&gt;SNAP: Write .img file\n        end\n    and Change Monitor\n        A-&gt;&gt;A: Monitor sectors\n        loop On Changes\n            A-&gt;&gt;D: Changed sectors (/ws/live)\n            D-&gt;&gt;INC: Write sectors (.cst)\n        end\n    end\n\n    loop Live Sync (live_sync_frequency)\n        D-&gt;&gt;INC: Read .cst file\n        D-&gt;&gt;A: Request sector data\n        A-&gt;&gt;A: Read sectors\n        A-&gt;&gt;D: Send sector data\n        D-&gt;&gt;INC: Write .bak file\n    end</code></pre> <p>The architecture utilizes four distinct WebSocket endpoints:</p> <ul> <li>/ws/config for configuration management</li> <li>/ws/snapshot for full disk backup operations</li> <li>/ws/live for real-time change tracking</li> <li>/ws/restore for data restoration processes</li> </ul> <p>This separation of concerns allows for efficient handling of different types of operations while maintaining persistent connections between the Agent and Dispatcher. The combination of continuous change tracking and dedicated communication channels makes blxrep particularly effective for maintaining synchronized disk states across systems. The planned optimizations for handling network interruptions will further enhance the system's efficiency and reliability in real-world deployment scenarios.</p>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code>architecture-beta\n    group dispatcher_system(cloud)[Dispatcher System]\n        service dispatcher_core(server)[Dispatcher] in dispatcher_system\n        service backup_storage(disk)[Backup Storage] in dispatcher_system\n\n    group target_servers(server)[Target Servers]\n        service agent1(server)[Agent 1] in target_servers\n\n\n    service admin(internet)[Backup Administrator]\n\n    dispatcher_core:B -- T:backup_storage\n\n    agent1:R -- L:dispatcher_core\n    admin:R -- L:dispatcher_core\n</code></pre> <p>Dispatcher is deployed in a different subnet or the datacenter than the target servers. The target servers can be connected to the dispatcher privately or publicly. The backup storage is a disk that is mounted to the dispatcher server where the backups are stored.</p>"},{"location":"motivation/","title":"Background and Motivation","text":"<p>Traditionally, companies have relied on kernel modules for change block tracking and bitmap-based incremental backups. While functional, this approach has several limitations:</p> <ol> <li>Complex kernel module development and maintenance requiring deep kernel expertise</li> <li>Challenging debugging process due to kernel space operations</li> <li>Limited testing capabilities in kernel space</li> <li>Scalability constraints due to kernel-level implementation</li> <li>Steep learning curve for kernel module development</li> <li>System reboots required for kernel module loading and updates</li> <li>Potential for system instability and security vulnerabilities due to unrestricted kernel access</li> </ol> <p>blxrep modernizes this approach by leveraging eBPF tracepoints to track disk changes at the sector level. This brings several advantages:</p> <ol> <li>Simplified development through eBPF's modern tooling, extensive documentation, and active community support</li> <li>Enhanced debugging capabilities with user-space tools and eBPF maps</li> <li>Comprehensive testing framework support</li> <li>Better scalability through efficient event processing</li> <li>More approachable learning curve with high-level eBPF programming interfaces</li> <li>Dynamic loading without system reboots</li> <li>Improved safety through eBPF's verifier and sandboxed execution environment</li> </ol>"},{"location":"setup/","title":"Setup guide","text":""},{"location":"setup/#agent-setup","title":"Agent Setup","text":""},{"location":"setup/#agent-prerequisites","title":"Agent Prerequisites","text":"<ul> <li>Requires a Linux kernel 5.10 or higher with eBPF support</li> <li>Only supports in Linux</li> </ul>"},{"location":"setup/#agent-installation","title":"Agent Installation","text":"Debian/Ubuntu (.deb)RedHat/CentOS (.rpm) <ol> <li> <p>Download the package: <pre><code>wget https://github.com/xmigrate/blxrep/releases/download/v0.1.0/blxrep-0.1.0-amd64.deb\n</code></pre></p> </li> <li> <p>Install the package: <pre><code>sudo dpkg -i blxrep-0.1.0-amd64.deb\n</code></pre></p> <p>Note: If you get an error about missing dependencies, you can install them with: <pre><code>sudo apt-get install -f\n</code></pre></p> </li> </ol> <ol> <li>Download the package: <pre><code>wget https://github.com/xmigrate/blxrep/releases/download/v0.1.0/blxrep-0.1.0-x86_64.rpm\n</code></pre></li> <li>Install the package: <pre><code>sudo rpm -i blxrep-0.1.0-x86_64.rpm\n</code></pre></li> </ol>"},{"location":"setup/#verify-installation","title":"Verify Installation","text":"<pre><code>sudo systemctl status blxrep\n</code></pre>"},{"location":"setup/#agent-configuration","title":"Agent Configuration","text":"<p>Agent configuration file is located at <code>/etc/blxrep/config.yaml</code> by default.</p> <p>Below is an example configuration file:</p> <pre><code>mode: \"agent\"\nid: \"hostname\"\ndispatcher-addr: \"ip:port\"\n</code></pre>"},{"location":"setup/#configuration-parameters","title":"Configuration Parameters","text":"Parameter Value Description <code>mode</code> <code>\"agent\"</code> Specifies the operation mode <code>id</code> <code>\"hostname\"</code> A unique identifier for the agent, usually the hostname <code>dispatcher-addr</code> <code>\"ip:port\"</code> IP address and port of the dispatcher (default port: 8080)"},{"location":"setup/#agent-post-installation-and-configuration","title":"Agent Post Installation and configuration","text":"<pre><code>sudo systemctl restart blxrep\nsudo systemctl enable blxrep\n</code></pre>"},{"location":"setup/#dispatcher-setup","title":"Dispatcher Setup","text":""},{"location":"setup/#dispatcher-prerequisites","title":"Dispatcher Prerequisites","text":"<ul> <li>Linux OS</li> <li>Additional disk mounted to a dedicated directory to store the full backups and incremental backups</li> </ul>"},{"location":"setup/#dispatcher-installation","title":"Dispatcher Installation","text":"Debian/Ubuntu (.deb)RedHat/CentOS (.rpm) <ol> <li> <p>Download the package: <pre><code>wget https://github.com/xmigrate/blxrep/releases/download/v0.1.0/blxrep-0.1.0-amd64.deb\n</code></pre></p> </li> <li> <p>Install the package: <pre><code>sudo dpkg -i blxrep-0.1.0-amd64.deb\n</code></pre></p> <p>Note: If you get an error about missing dependencies, you can install them with: <pre><code>sudo apt-get install -f\n</code></pre></p> </li> </ol> <ol> <li>Download the package: <pre><code>wget https://github.com/xmigrate/blxrep/releases/download/v0.1.0/blxrep-0.1.0-x86_64.rpm\n</code></pre></li> <li>Install the package: <pre><code>sudo rpm -i blxrep-0.1.0-x86_64.rpm\n</code></pre></li> </ol>"},{"location":"setup/#verify-installation_1","title":"Verify Installation","text":"<pre><code>sudo systemctl status blxrep\n</code></pre>"},{"location":"setup/#dispatcher-configuration","title":"Dispatcher Configuration","text":"<p>Dispatcher configuration file is located at <code>/etc/blxrep/config.yaml</code> by default.</p> <p>Below is an example configuration file:</p> <pre><code>mode: \"dispatcher\"\ndata-dir: \"/data\"\npolicy-dir: \"/etc/blxrep/policies\"\n</code></pre>"},{"location":"setup/#configuration-parameters_1","title":"Configuration Parameters","text":"Parameter Value Description <code>mode</code> <code>\"dispatcher\"</code> Specifies the operation mode <code>data-dir</code> <code>\"/data\"</code> Directory to store the full backups and incremental backups <code>policy-dir</code> <code>\"/etc/blxrep/policies\"</code> Directory to store the backup policies"},{"location":"setup/#backup-policy","title":"Backup policy","text":"<p>Backup policy is a YAML file that defines the backup schedule, retention policy, and other backup settings. It is located at <code>/etc/blxrep/policies</code> by default. You can create a new policy file by creating a new YAML file in this directory as you add new servers for backup.</p> <p>Below is an example backup policy file:</p> <pre><code>name: \"default-backup-policy\"\ndescription: \"Backup policy for all servers\"\narchive_interval: 48h\nsnapshot_frequency: \"daily\"\nsnapshot_time: \"12:00:00\"\nbandwidth_limit: 100\nsnapshot_retention: 30\nlive_sync_frequency: 2m\ntransition_after_days: 30\ndelete_after_days: 90\n\ntargets:\n  # Range pattern\n  - pattern: \"*\"\n    disks_excluded: \n      - \"/dev/xvdb\"\n</code></pre>"},{"location":"setup/#policy-parameters","title":"Policy Parameters","text":"Parameter Description <code>name</code> Name of the policy <code>description</code> Description of the policy <code>archive_interval</code> Interval to archive backups, eg 48h, 1d, 1w, 1m <code>snapshot_frequency</code> Frequency of the snapshots (daily, weekly, monthly) <code>snapshot_time</code> Time of the day to take the snapshots <code>bandwidth_limit</code> Bandwidth limit for the backup in MB/s <code>snapshot_retention</code> Number of days to keep the snapshots <code>live_sync_frequency</code> Frequency of the live sync <code>transition_after_days</code> Number of days to keep the full and incremental backups <code>delete_after_days</code> Number of days to keep the full backups and incremental backups <code>targets</code> List of targets to backup <code>targets[].pattern</code> Pattern of the target, eg \"*\" or \"hostname\" <code>targets[].disks_excluded</code> List of disks to exclude from the backup"},{"location":"setup/#dispatcher-post-installation-and-configuration","title":"Dispatcher Post Installation and configuration","text":"<pre><code>sudo systemctl restart blxrep\nsudo systemctl enable blxrep\n</code></pre>"},{"location":"troubleshoot/","title":"Troubleshooting","text":""},{"location":"troubleshoot/#agent-not-connecting-to-the-dispatcher","title":"Agent not connecting to the dispatcher","text":"<p>If the agent is not connecting to the dispatcher, you can check the logs of the agent and dispatcher to see if there are any errors.</p> <p>To check the logs of the agent, you can use the following command:</p> <pre><code>journalctl -xeu blxrep -f\n</code></pre> <p>To check the logs of the dispatcher, you can use the following command:</p> <pre><code>tail -f &lt;dispatcher-data-dir&gt;/logs/blxrep.log\n</code></pre> <p>If you see any errors, you can try to fix them by checking the documentation or asking for help in the community.</p>"},{"location":"tui/","title":"TUI Operations","text":""},{"location":"tui/#navigating-through-the-backups-of-an-agent","title":"Navigating through the backups of an agent","text":"<p>TUI is provided by the <code>blxrep tui</code> command. It is a terminal UI that allows you to navigate through the backups of an agent. You can do the following operations:</p> <ul> <li>Navigate through the backups of an agent</li> <li>Mount a backup to a point in time</li> <li>Restore a file or partition from a backup</li> <li>Check the scheduled backups progress and status</li> <li>Check the status of the agent</li> </ul>"},{"location":"tui/#quick-start-video","title":"Quick start video","text":""}]}